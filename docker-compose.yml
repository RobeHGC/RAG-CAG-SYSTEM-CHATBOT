version: '3.8'

services:
  # PostgreSQL Database (for fine-tuning data)
  postgres:
    image: postgres:15-alpine
    container_name: bot_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bot_provisional}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-bot_provisional}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis (for cache and session storage)
  redis:
    image: redis:7-alpine
    container_name: bot_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Neo4j (for knowledge graph)
  neo4j:
    image: neo4j:5-community
    container_name: bot_neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-neo4j}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD:-neo4j}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Main Application (Dashboard)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: bot_app
    environment:
      - DEBUG=${DEBUG:-true}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-bot_provisional}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j}
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - .:/app:ro
      - app_logs:/app/logs
      - app_data:/app/data
    ports:
      - "${DASHBOARD_PORT:-8000}:8000"
    networks:
      - bot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Userbot Service
  userbot:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: bot_userbot
    command: ["python", "-m", "src.userbot.main"]
    environment:
      - DEBUG=${DEBUG:-true}
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_SESSION_NAME=${TELEGRAM_SESSION_NAME:-userbot}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - .:/app:ro
      - userbot_sessions:/app/data/sessions
      - app_logs:/app/logs
    networks:
      - bot_network
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["full"]

  # Celery Worker (for async tasks)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: bot_celery_worker
    command: ["celery", "-A", "src.common.celery_app", "worker", "--loglevel=info"]
    environment:
      - DEBUG=${DEBUG:-true}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-bot_provisional}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app:ro
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - bot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["full"]

  # Flower (Celery monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: bot_flower
    command: ["celery", "-A", "src.common.celery_app", "flower"]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    networks:
      - bot_network
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped
    profiles: ["monitoring"]

networks:
  bot_network:
    driver: bridge
    name: bot_provisional_network

volumes:
  postgres_data:
    name: bot_postgres_data
  redis_data:
    name: bot_redis_data
  neo4j_data:
    name: bot_neo4j_data
  neo4j_logs:
    name: bot_neo4j_logs
  neo4j_import:
    name: bot_neo4j_import
  neo4j_plugins:
    name: bot_neo4j_plugins
  app_logs:
    name: bot_app_logs
  app_data:
    name: bot_app_data
  userbot_sessions:
    name: bot_userbot_sessions