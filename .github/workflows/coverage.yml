name: Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  
env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: bot_provisional_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/testpassword
        ports:
          - 7474:7474
          - 7687:7687
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libpq-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download spaCy model
      run: python -m spacy download es_core_news_sm
      
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "TESTING=true" >> .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "POSTGRES_DB=bot_provisional_test" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=postgres" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "NEO4J_HOST=localhost" >> .env
        echo "NEO4J_PORT=7687" >> .env
        echo "NEO4J_USER=neo4j" >> .env
        echo "NEO4J_PASSWORD=testpassword" >> .env
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
        timeout 120 bash -c 'until nc -z localhost 7474; do sleep 1; done'
        sleep 10
        
    - name: Generate coverage report
      run: |
        python -m pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-branch \
          --cov-fail-under=0
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: bot-provisional-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Generate coverage badge
      run: |
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        coverage = tree.getroot().attrib['line-rate']
        print(f'{float(coverage)*100:.1f}')
        ")
        echo "Coverage: ${COVERAGE}%"
        
        # Create badge color based on coverage
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"  
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          
    - name: Coverage comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = process.env.COVERAGE;
          
          const comment = `## 📊 Coverage Report
          
          **Coverage: ${coverage}%**
          
          ${coverage >= 20 ? '✅' : '⚠️'} Coverage is ${coverage >= 20 ? 'above' : 'below'} the 20% threshold.
          
          **Target:** Eventually reach 80% coverage as codebase matures.
          
          Detailed coverage report is available in the artifacts.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Deploy coverage reports to GitHub Pages (for main branch only)
  deploy-coverage:
    name: Deploy Coverage to GitHub Pages
    runs-on: ubuntu-latest
    needs: coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: ./coverage-reports
        
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./coverage-reports/htmlcov
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4