name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  # Reduce noise in CI logs
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  # Increase pip timeout for slower networks
  PIP_TIMEOUT: 60
  PIP_RETRIES: 3
  # Use pip cache
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # Quick syntax and basic checks
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort bandit safety ruff
        pip install -r requirements.txt
        
    - name: Check code formatting with Black
      run: black --check --diff src/ tests/ scripts/
      
    - name: Check import sorting with isort
      run: isort --check-only --diff src/ tests/ scripts/
      
    - name: Lint with flake8
      run: flake8 src/ tests/ scripts/
      
    - name: Type check with mypy
      run: mypy src/ tests/ scripts/
      continue-on-error: true  # Don't fail CI on type errors for now
      
    - name: Security scan with bandit
      run: bandit -r src/ -f json || true  # Don't fail on security issues for now
      
    - name: Check dependencies with safety
      run: safety check || true  # Don't fail on security issues for now

  # Test matrix across Python versions
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: bot_provisional_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "wget http://localhost:7474 || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          libpq-dev
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download spaCy model
      run: python -m spacy download es_core_news_sm
      
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "TESTING=true" >> .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "POSTGRES_DB=bot_provisional_test" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=postgres" >> .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "NEO4J_HOST=localhost" >> .env
        echo "NEO4J_PORT=7687" >> .env
        echo "NEO4J_USER=neo4j" >> .env
        echo "NEO4J_PASSWORD=testpassword" >> .env
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until nc -z localhost 5432; do sleep 1; done'
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
        timeout 120 bash -c 'until nc -z localhost 7474; do sleep 1; done'
        sleep 10  # Additional wait for services to be fully ready
        
    - name: Test database connections
      run: python scripts/check_connections.py --quiet
      continue-on-error: true
      
    - name: Run unit tests
      run: |
        python -m pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=test-results.xml \
          -v
          
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          coverage.xml
          htmlcov/

  # Integration tests with full Docker environment
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [lint]
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "TESTING=true" >> .env
        
    - name: Start Docker services
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to be ready
        
    - name: Validate Docker environment
      run: python scripts/validate_docker.py
      
    - name: Initialize databases
      run: python scripts/init_databases.py
      
    - name: Run integration tests
      run: |
        python -m pytest tests/ \
          -m "integration" \
          --tb=short \
          -v
      continue-on-error: true
      
    - name: Show Docker logs on failure
      if: failure()
      run: docker-compose logs
      
    - name: Clean up Docker
      if: always()
      run: docker-compose down -v

  # Build validation
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Build package
      run: python -m build
      
    - name: Check build artifacts
      run: |
        ls -la dist/
        python -m pip install dist/*.whl
        python -c "import src; print('Package installed successfully')"

  # Security and dependency analysis
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || true
        
    - name: Check dependencies with Safety
      run: safety check --json --output safety-report.json || true
      
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Lint status: ${{ needs.lint.result }}"
        echo "Test status: ${{ needs.test.result }}"
        echo "Build status: ${{ needs.build.result }}"
        
        if [[ "${{ needs.lint.result }}" != "success" || "${{ needs.test.result }}" != "success" || "${{ needs.build.result }}" != "success" ]]; then
          echo "❌ CI pipeline failed"
          exit 1
        else
          echo "✅ CI pipeline passed"
        fi